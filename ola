import cards as c
import random as r
import pygame

class Foundation:
    def __init__(self, suite: c.CardSuite, x, y):
        self.cards = list()
        self.suite = suite
        self.x = x
        self.y = y
        self.placeholder_image = pygame.image.load("resources/placeholder.jpg")  # Placeholder image

    def top(self):
        return self.cards[-1] if self.cards else None

    def insert(self, card: c.Card) -> bool:
        if card.cardSuite == self.suite and (not self.cards or card.prev().value == self.top().cardValue.value):
            self.cards.append(card)
            return True
        return False

    def isFull(self) -> bool:
        return self.top().cardValue.value == c.CardValue.king if self.cards else False

    def draw(self, screen):
        if not self.cards:
            screen.blit(self.placeholder_image, (self.x, self.y))  # Draw empty slot
        else:
            screen.blit(self.top().image, (self.x, self.y))

class CardColumn:
    def __init__(self, cards: list[c.Card]):
        self.cards = cards.copy()

    def is_empty(self):
        return len(self.cards) == 0

    def top(self):
        return self.cards[-1]

    def pop(self) -> c.Card:
        return self.cards.pop()

    def insert(self, card: c.Card):
        if self.is_empty() or card.next() == self.top().cardValue:
            self.cards.append(card)
            return True
        return False

    def n_cards(self) -> int:
        return len(self.cards)

    def render(self, screen, pos: list[int, int]):
        gap = self.cards[0].image.get_height() * 0.26
        for i in range(self.n_cards() - 1):
            pos[1] += gap
            screen.blit(self.cards[i].image, pos)

        pos[1] += gap
        screen.blit(self.top().image, pos)

class Board:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((1200, 800))  # Adjust window size if needed
        pygame.display.set_caption("Baker's Dozen Solitaire")
        
        self.background = pygame.image.load("resources/background.jpg")
        self.columns = list()

        self.foundations = [
            Foundation(suite, 1000, 150 * suite + 50) for suite in range(4)
        ]

        deck = []
        for i in range(52):
            cv = c.CardValue(i // 4 + 1)
            cs = c.CardSuite(i % 4)
            deck.append(c.Card(cv, cs))

        r.shuffle(deck)

        for i in range(13):
            column = CardColumn(deck[i * 4 : i * 4 + 4])
            self.columns.append(column)

    def render(self):
        self.screen.blit(self.background, (0, 0))
        pos = [50, 50]
        i = 0
        for column in self.columns:
            width = column.top().image.get_width()
            height = column.top().image.get_height()
            pos[0] = 50 + (width + 50) * (i % 7)
            pos[1] = 50 + (height * 2) * (i // 7)
            column.render(self.screen, pos)
            i += 1

        for found in self.foundations:
            found.draw(self.screen)

        pygame.display.flip()

    def run(self):
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    print("Jogar button clicked!")  # Debug print for button click

            self.render()

        pygame.quit()

if __name__ == "__main__":
    game = Board()
    game.run()
